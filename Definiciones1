üìò Resumen de Programaci√≥n Orientada a Objetos (POO) en Java
1. Conceptos Fundamentales

POO: paradigma que organiza programas en colecciones de objetos que interact√∫an entre s√≠.

Objeto: entidad que representa algo (persona, transacci√≥n, producto). Tiene:

Atributos ‚Üí caracter√≠sticas o estado (ej: nombre, edad).

M√©todos ‚Üí comportamientos o acciones (ej: comer, calcularEdad).

Clase: molde o plantilla a partir de la cual se crean los objetos.

Instancia: cada objeto particular creado a partir de una clase.

Abstracci√≥n: enfocarse en lo esencial y omitir lo irrelevante para el modelo.

Modelado: identificar entidades y relaciones de un √°rea espec√≠fica (ej: ventas, finanzas).

2. Estructura de una Clase

Una clase en Java suele incluir:

Atributos (normalmente private).

Constructores:

M√©todo especial para inicializar objetos.

Puede haber varios (sobrecarga).

Asignan valores iniciales y evitan null.

M√©todos (normalmente public):

Definen el comportamiento de los objetos.

Ejemplo: public String comer() { return this.nombre + " est√° comiendo"; }

üìå Ejemplo:

public class Persona {
    private String nombre;
    private int edad;
    private String dni;

    public Persona() {  // Constructor por defecto
        nombre = "";
        edad = 0;
        dni = "";
    }

    public Persona(String unNombre) { // Constructor con par√°metro
        this.nombre = unNombre;
    }

    public String comer() {
        return this.nombre + " est√° comiendo";
    }
}

3. Palabra Clave this

Apunta al objeto actual en ejecuci√≥n.

Se usa para:

Diferenciar atributos de par√°metros con el mismo nombre.

Referirse al objeto dentro de sus propios m√©todos.

4. M√©todos de Acceso (Getters y Setters)

Getter (get): devuelve el valor de un atributo.

Setter (set): modifica el valor de un atributo.

Ejemplo:

public String getNombre() {
    return nombre;
}

public void setNombre(String nombre) {
    this.nombre = nombre;
}

5. Convenciones en Java

Las clases se nombran con may√∫scula inicial (Persona, Cliente).

Los m√©todos y atributos comienzan en min√∫scula (getNombre, edad).

Punto de entrada: clase Main con m√©todo main.

6. Otros Conceptos Clave

Sobrecarga de constructores: varios constructores en la misma clase con distintos par√°metros.

Concatenaci√≥n: + combina Strings (y convierte a String cualquier otro tipo si se suma a un String).

toString(): m√©todo para representar un objeto como texto.

Diagrama de clases UML: representaci√≥n gr√°fica con nombre, atributos y m√©todos.

7. Conceptos Avanzados

Herencia: permite que una clase (subclase) herede atributos y m√©todos de otra (superclase).

Facilita la reutilizaci√≥n de c√≥digo.

Ejemplo: Empleado extends Persona.

Reutilizaci√≥n y extensi√≥n: gracias a la herencia y polimorfismo, se evita duplicar c√≥digo.

Encapsulamiento: restringe el acceso directo a los atributos usando modificadores de acceso (private, public, protected).
